#!/usr/bin/env python
#
# Java Uploader for Samsung mobile phones.
# Copyright (c) 2007 Paulo Matias
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
#
#    1. Redistributions of source code must retain the above copyright
#       notice, this list of conditions and the following disclaimer.
#    2. Redistributions in binary form must reproduce the above copyright
#       notice, this list of conditions and the following disclaimer in the
#       documentation and/or other materials provided with the distribution.
#    3. The name of the author may not be used to endorse or promote
#       products derived from this software without specific prior written
#       permission.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
# NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
# TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
# PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
# LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
# NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#

import sys, os, getopt, urllib, string
import BaseHTTPServer


def copyright():
    print """
Java Uploader for Samsung mobile phones.
Copyright (c) 2007 Paulo Matias

This is a free software licensed under a BSD license AND
HAS NO WARRANTIES. See source code for details.
"""

def usage():
    print """Usage: %s [-l addr] [-p port] files.jad
       -l addr    Address to listen into. Defaults to any.
       -p port    Port to listen into. Defaults to 888.
       files.jad  Java applications you want to upload.
""" % sys.argv[0]
    sys.exit(1)


def add_dir_to_path(dir, path):
    """ Returns dir/path. """
    if (dir != '') and (dir[-1] != '/'):
        dir += '/'
    return dir + path

def mini_wget(url, destdir=''):
    """ Gets a file at url to the local directory. Reports status to stdout. """
    filename = os.path.basename(url)
    def reporthook(tblocks, blocksize, size):
        percent = (100.0*tblocks*blocksize/size)
        if percent > 100.0:
            percent = 100.0
        sys.stdout.write("\rDownloading '%s'... [%.1f%%]" % (filename, percent))
        sys.stdout.flush()
    (filename, headers) = urllib.urlretrieve(url, add_dir_to_path(destdir, filename), reporthook)
    sys.stdout.write("\n")
    return filename

def prepare_jad(location):
    """ Returns a tuple of JAR file location and JAD file contents ready to be sent
    to the mobile phone. The argument 'location' can be a filename or an url. """
    # Download JAD file if needed.
    if '://' in location:
        location = mini_wget(location)
    # Open file and read contents.
    f = open(location)
    lines = f.readlines()
    f.close()
    # Get JAD file directory.
    jad_dir = os.path.dirname(location)
    # Parse MIDlet-Jar-URL.
    jar_url = None
    for i in range(len(lines)):
        line = lines[i]
        (option, value) = [s.strip() for s in line.split(':', 1)]
        if option.lower() == 'midlet-jar-url':
            # Found.
            jar_url = value
            # Download JAR file if needed.
            if '://' in jar_url:
                jar_url = mini_wget(jar_url, jad_dir)
                # Replace at current line.
                lines[i] = 'MIDlet-Jar-URL: %s\n' % os.path.basename(jar_url)
            else:
                # Add JAD directory to JAR path.
                jar_url = add_dir_to_path(jad_dir, jar_url)
    if jar_url is None:
        raise SyntaxError, 'JAD file does not contain MIDlet-Jar-URL.'
    # Returns jar_url and JAD file contents.
    return (jar_url, string.join(lines, ''))


def main():
    
    # Display copyright notice.
    copyright()
    
    # Default arguments.
    addr = ''
    port = 888
    
    # Process options from command line.
    try: opts, args = getopt.getopt(sys.argv[1:], "l:p:")
    except: usage()
    for o, a in opts:
        if o == '-h':
            usage()
        elif o == '-l':
            addr = a
        elif o == '-p':
            port = int(a)
            
    # Check if files are provided at command line.
    if len(args) == 0:
        usage()
        
    # Declare this stuff global, so we can easily access them.
    # XXX Is there any better way?
    global jad_files, jar_files
    
    # Initialize lists for JAD file contents and JAR file locations.
    jad_files = []
    jar_files = []
        
    # Prepare JAD files for sending.
    for jad_location in args:
        (jar_location, jad_contents) = prepare_jad(jad_location)
        if not os.path.exists(jar_location):
            raise IOError, 'JAR file not found.'
        jad_files.append(jad_contents)
        jar_files.append(jar_location)
    
    # Our request handler.
    class http_handler(BaseHTTPServer.BaseHTTPRequestHandler):
        server_version = 'SamsuJ/cvs'
        def do_GET(self):
            global jad_files, jar_files
            
            basename = os.path.basename(self.path)
            if basename.lower() == 'getnextapp.jad':
                content_type = 'text/vnd.sun.j2me.app-descriptor'
                content   = jad_files[0]
                jad_files = jad_files[1:]
            else:
                content_type = 'application/java-archive'
                jar_location = jar_files[0]
                if os.path.basename(jar_location) != basename:
                    raise IOError, 'Unexpected GET request from mobile phone.'
                f = open(jar_location)
                content = f.read()
                f.close()
                jar_files = jar_files[1:]
                
            self.send_response(200)
            self.send_header('Connection', 'close')
            self.send_header('Content-type', content_type)
            self.send_header('Content-Length', len(content))
            self.end_headers()
            self.wfile.write(content)
    
    print
    print 'Ready to send files to the mobile phone.'
    print
    
    # Create HTTP server.
    http_server = BaseHTTPServer.HTTPServer((addr, port), http_handler)
    http_server.serve_forever()
    
if __name__ == '__main__':
    main()

